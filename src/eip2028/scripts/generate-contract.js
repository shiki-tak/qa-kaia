const solc = require('solc');

function generateContractCode(size) {
  const data = 'a'.repeat(size);
  return `
    // SPDX-License-Identifier: MIT
    pragma solidity ^0.8.28;
    
    contract TestContract${size} {
        string public constant data = "${data}";
        
        function getData() public pure returns (string memory) {
            return data;
        }
    }
  `;
}

function compileContracts(sizes) {
  const sources = {};
  
  sizes.forEach(size => {
    sources[`TestContract${size}.sol`] = {
      content: generateContractCode(size)
    };
  });

  const input = {
    language: 'Solidity',
    sources: sources,
    settings: {
      outputSelection: {
        '*': {
          '*': ['evm.bytecode']
        }
      }
    }
  };

  const output = JSON.parse(solc.compile(JSON.stringify(input)));
  
  const bytecodes = {};
  sizes.forEach(size => {
    const contractName = `TestContract${size}`;
    bytecodes[size] = '0x' + output.contracts[`${contractName}.sol`][contractName].evm.bytecode.object;
  });

  return bytecodes;
}

const dataSizes = [32, 64, 128, 256, 512, 1024, 2048];
const contractBytecodes = compileContracts(dataSizes);

const fs = require('fs');
const output = `
// This file is automatically generated.
const CONTRACT_BYTECODES = ${JSON.stringify(contractBytecodes, null, 2)};
module.exports = CONTRACT_BYTECODES;
`;

fs.writeFileSync('contract-bytecodes.js', output);

console.log('\nBytecode sizes:');
Object.entries(contractBytecodes).forEach(([size, bytecode]) => {
  console.log(`Size ${size}: ${(bytecode.length - 2) / 2} bytes`);
});
